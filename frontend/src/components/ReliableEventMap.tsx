import React from 'react';

interface ReliableEventMapProps {
  location: string;
  cityName: string;
  eventTitle: string;
}

const ReliableEventMap: React.FC<ReliableEventMapProps> = ({ location, cityName, eventTitle }) => {
  const [mapReady, setMapReady] = React.useState(false);
  const [error, setError] = React.useState<string | null>(null);
  const mapContainerRef = React.useRef<HTMLDivElement>(null);

  console.log('üîß ReliableEventMap —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è —Å –ø—Ä–æ–ø—Å–∞–º–∏:', { location, cityName, eventTitle });

  React.useEffect(() => {
    console.log('üöÄ ReliableEventMap useEffect –∑–∞–ø—É—â–µ–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥–æ—Ç–æ–≤
    const checkContainer = () => {
      if (mapContainerRef.current) {
        console.log('‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –≥–æ—Ç–æ–≤');
        setMapReady(true);
        initializeMap();
      } else {
        console.log('‚è≥ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –∂–¥–µ–º...');
        setTimeout(checkContainer, 100);
      }
    };

    const initializeMap = () => {
      console.log('üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã...');
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ Yandex Maps
        if (window.ymaps) {
          console.log('‚úÖ Yandex Maps —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
          createMap();
        } else {
          console.log('üì° –ó–∞–≥—Ä—É–∂–∞–µ–º Yandex Maps API...');
          loadYandexMaps();
        }
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', err);
        setError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã');
      }
    };

    const loadYandexMaps = () => {
      const script = document.createElement('script');
      const apiKey = import.meta.env.VITE_YANDEX_MAPS_API_KEY || '';
      const apiKeyParam = apiKey ? `&apikey=${apiKey}` : '';
      script.src = `https://api-maps.yandex.ru/2.1/?lang=ru_RU${apiKeyParam}`;
      script.async = true;
      
      script.onload = () => {
        console.log('‚úÖ Yandex Maps API –∑–∞–≥—Ä—É–∂–µ–Ω');
        createMap();
      };
      
      script.onerror = (err) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Yandex Maps API:', err);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã');
      };
      
      document.head.appendChild(script);
    };

    const createMap = () => {
      if (!mapContainerRef.current) {
        console.log('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        setError('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      window.ymaps.ready(() => {
        console.log('üéØ Yandex Maps –≥–æ—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É...');
        
        // –ì–µ–æ–∫–æ–¥–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
        const geocoder = window.ymaps.geocode(`${location}, ${cityName}`, {
          results: 1
        });

        geocoder.then((result: any) => {
          console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', result);
          
          if (result.geoObjects.getLength() > 0) {
            const firstGeoObject = result.geoObjects.get(0);
            const coordinates = firstGeoObject.geometry.getCoordinates();
            console.log('üìç –ù–∞–π–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', coordinates);

            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
            const map = new window.ymaps.Map(mapContainerRef.current, {
              center: coordinates,
              zoom: 15,
              controls: ['zoomControl', 'typeSelector', 'fullscreenControl']
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
            const placemark = new window.ymaps.Placemark(coordinates, {
              balloonContent: `
                <div style="padding: 10px;">
                  <strong>${eventTitle}</strong><br/>
                  <span style="color: #666;">${location}</span><br/>
                  <small style="color: #999;">${cityName}</small>
                </div>
              `,
              hintContent: eventTitle
            }, {
              preset: 'islands#redDotIcon',
              iconColor: '#ff0000'
            });

            map.geoObjects.add(placemark);
            placemark.balloon.open();
            
            console.log('‚úÖ –ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
          } else {
            console.log('‚ö†Ô∏è –¢–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ –≥–æ—Ä–æ–¥—É...');
            // Fallback –Ω–∞ –≥–æ—Ä–æ–¥
            const cityGeocoder = window.ymaps.geocode(cityName, {
              results: 1
            });

            cityGeocoder.then((cityResult: any) => {
              if (cityResult.geoObjects.getLength() > 0) {
                const firstGeoObject = cityResult.geoObjects.get(0);
                const coordinates = firstGeoObject.geometry.getCoordinates();

                const map = new window.ymaps.Map(mapContainerRef.current, {
                  center: coordinates,
                  zoom: 12,
                  controls: ['zoomControl', 'typeSelector', 'fullscreenControl']
                });

                const placemark = new window.ymaps.Placemark(coordinates, {
                  balloonContent: `
                    <div style="padding: 10px;">
                      <strong>${eventTitle}</strong><br/>
                      <span style="color: #666;">${location}</span><br/>
                      <small style="color: #999;">${cityName}</small><br/>
                      <small style="color: #ff6b6b;">–¢–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑–∞–Ω —Ü–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞</small>
                    </div>
                  `,
                  hintContent: `${eventTitle} (${cityName})`
                }, {
                  preset: 'islands#orangeDotIcon',
                  iconColor: '#ff6b6b'
                });

                map.geoObjects.add(placemark);
                placemark.balloon.open();
                
                console.log('‚úÖ –ö–∞—Ä—Ç–∞ –≥–æ—Ä–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
              } else {
                console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥');
                setError('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
              }
            }).catch((err: any) => {
              console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞:', err);
              setError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è');
            });
          }
        }).catch((err: any) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
          setError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–∞');
        });
      });
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    checkContainer();
  }, [location, cityName, eventTitle]);

  if (error) {
    console.log('‚ùå –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É:', error);
    return (
      <div style={{ 
        height: 300, 
        display: 'flex', 
        alignItems: 'center', 
        justifyContent: 'center',
        background: '#f5f5f5',
        borderRadius: 8,
        color: '#666'
      }}>
        <div>{error}</div>
      </div>
    );
  }

  if (!mapReady) {
    console.log('‚è≥ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
    return (
      <div style={{ 
        height: 300, 
        display: 'flex', 
        alignItems: 'center', 
        justifyContent: 'center',
        background: '#f5f5f5',
        borderRadius: 8
      }}>
        <div>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</div>
      </div>
    );
  }

  console.log('üó∫Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É');
  return (
    <div 
      ref={mapContainerRef} 
      style={{ 
        height: 300, 
        borderRadius: 8, 
        overflow: 'hidden',
        border: '1px solid #d9d9d9'
      }} 
    />
  );
};

export default ReliableEventMap;
