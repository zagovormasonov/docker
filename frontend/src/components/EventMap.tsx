import React from 'react';

interface EventMapProps {
  location: string;
  cityName: string;
  eventTitle: string;
}

const EventMap: React.FC<EventMapProps> = ({ location, cityName, eventTitle }) => {
  const mapRef = React.useRef<HTMLDivElement>(null);
  const [loading, setLoading] = React.useState(true);
  const [error, setError] = React.useState<string | null>(null);

  console.log('üîß EventMap —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è —Å –ø—Ä–æ–ø—Å–∞–º–∏:', { location, cityName, eventTitle });

  React.useEffect(() => {
    console.log('üöÄ useEffect –∑–∞–ø—É—â–µ–Ω –¥–ª—è EventMap');
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏, —á—Ç–æ DOM –≥–æ—Ç–æ–≤
    const timeoutId = setTimeout(() => {
      console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã');
    }, 50);
    
    const initMap = async () => {
      console.log('üéØ initMap –≤—ã–∑–≤–∞–Ω, mapRef.current:', mapRef.current);
      
      // –ñ–¥–µ–º, –ø–æ–∫–∞ ref –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
      if (!mapRef.current) {
        console.log('‚è≥ mapRef.current –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –∂–¥–µ–º...');
        // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        setTimeout(() => {
          console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞, mapRef.current:', mapRef.current);
          if (mapRef.current) {
            initMap();
          } else {
            console.log('‚ùå mapRef.current –≤—Å–µ –µ—â–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è');
            setError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã');
            setLoading(false);
          }
        }, 100);
        return;
      }

      try {
        setLoading(true);
        setError(null);

        console.log('üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –¥–ª—è:', { location, cityName, eventTitle });

        // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (30 —Å–µ–∫—É–Ω–¥)
        const timeout = setTimeout(() => {
          console.error('‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã');
          setError('–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã');
          setLoading(false);
        }, 30000);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º Yandex Maps API
        if (!window.ymaps) {
          console.log('üì° –ó–∞–≥—Ä—É–∂–∞–µ–º Yandex Maps API...');
          const script = document.createElement('script');
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –±–µ–∑ –∫–ª—é—á–∞ –¥–ª—è –¥–µ–º–æ
          const apiKey = import.meta.env.VITE_YANDEX_MAPS_API_KEY || '';
          const apiKeyParam = apiKey ? `&apikey=${apiKey}` : '';
          script.src = `https://api-maps.yandex.ru/2.1/?lang=ru_RU${apiKeyParam}`;
          script.async = true;
          
          await new Promise((resolve, reject) => {
            script.onload = () => {
              console.log('‚úÖ Yandex Maps API –∑–∞–≥—Ä—É–∂–µ–Ω');
              resolve(true);
            };
            script.onerror = (err) => {
              console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Yandex Maps API:', err);
              reject(err);
            };
            document.head.appendChild(script);
          });
        } else {
          console.log('‚úÖ Yandex Maps API —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
        window.ymaps.ready(() => {
          console.log('üéØ Yandex Maps –≥–æ—Ç–æ–≤, –Ω–∞—á–∏–Ω–∞–µ–º –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ...');
          
          // –ì–µ–æ–∫–æ–¥–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
          const geocoder = window.ymaps.geocode(`${location}, ${cityName}`, {
            results: 1
          });

          geocoder.then((result: any) => {
            console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', result);
            
            if (result.geoObjects.getLength() > 0) {
              const firstGeoObject = result.geoObjects.get(0);
              const coordinates = firstGeoObject.geometry.getCoordinates();
              console.log('üìç –ù–∞–π–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', coordinates);

              // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
              const map = new window.ymaps.Map(mapRef.current, {
                center: coordinates,
                zoom: 15,
                controls: ['zoomControl', 'typeSelector', 'fullscreenControl']
              });

              // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
              const placemark = new window.ymaps.Placemark(coordinates, {
                balloonContent: `
                  <div style="padding: 10px;">
                    <strong>${eventTitle}</strong><br/>
                    <span style="color: #666;">${location}</span><br/>
                    <small style="color: #999;">${cityName}</small>
                  </div>
                `,
                hintContent: eventTitle
              }, {
                preset: 'islands#redDotIcon',
                iconColor: '#ff0000'
              });

              map.geoObjects.add(placemark);
              
              // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–ª—É–Ω
              placemark.balloon.open();
              
              console.log('‚úÖ –ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
              clearTimeout(timeout);
              setLoading(false);
            } else {
              console.log('‚ö†Ô∏è –¢–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ –≥–æ—Ä–æ–¥—É...');
              // –ï—Å–ª–∏ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ –≥–æ—Ä–æ–¥—É
              const cityGeocoder = window.ymaps.geocode(cityName, {
                results: 1
              });

              cityGeocoder.then((cityResult: any) => {
                console.log('üèôÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞:', cityResult);
                
                if (cityResult.geoObjects.getLength() > 0) {
                  const firstGeoObject = cityResult.geoObjects.get(0);
                  const coordinates = firstGeoObject.geometry.getCoordinates();
                  console.log('üìç –ù–∞–π–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞:', coordinates);

                  const map = new window.ymaps.Map(mapRef.current, {
                    center: coordinates,
                    zoom: 12,
                    controls: ['zoomControl', 'typeSelector', 'fullscreenControl']
                  });

                  const placemark = new window.ymaps.Placemark(coordinates, {
                    balloonContent: `
                      <div style="padding: 10px;">
                        <strong>${eventTitle}</strong><br/>
                        <span style="color: #666;">${location}</span><br/>
                        <small style="color: #999;">${cityName}</small><br/>
                        <small style="color: #ff6b6b;">–¢–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑–∞–Ω —Ü–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞</small>
                      </div>
                    `,
                    hintContent: `${eventTitle} (${cityName})`
                  }, {
                    preset: 'islands#orangeDotIcon',
                    iconColor: '#ff6b6b'
                  });

                  map.geoObjects.add(placemark);
                  placemark.balloon.open();
                  
                  console.log('‚úÖ –ö–∞—Ä—Ç–∞ –≥–æ—Ä–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
                  clearTimeout(timeout);
                  setLoading(false);
                } else {
                  console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥');
                  clearTimeout(timeout);
                  setError('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
                  setLoading(false);
                }
              }).catch((err: any) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞:', err);
                clearTimeout(timeout);
                setError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è');
                setLoading(false);
              });
            }
          }).catch((err: any) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
            clearTimeout(timeout);
            setError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–∞');
            setLoading(false);
          });
        });

      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:', err);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã');
        setLoading(false);
      }
    };

    initMap();

    // Cleanup —Ñ—É–Ω–∫—Ü–∏—è
    return () => {
      clearTimeout(timeoutId);
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    };
  }, [location, cityName, eventTitle]);

  console.log('üé® EventMap —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è, —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', { loading, error });

  if (loading) {
    console.log('‚è≥ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
    return (
      <div style={{ 
        height: 300, 
        display: 'flex', 
        alignItems: 'center', 
        justifyContent: 'center',
        background: '#f5f5f5',
        borderRadius: 8
      }}>
        <div>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</div>
      </div>
    );
  }

  if (error) {
    console.log('‚ùå –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É:', error);
    return (
      <div style={{ 
        height: 300, 
        display: 'flex', 
        alignItems: 'center', 
        justifyContent: 'center',
        background: '#f5f5f5',
        borderRadius: 8,
        color: '#666'
      }}>
        <div>{error}</div>
      </div>
    );
  }

  console.log('üó∫Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É');
  return (
    <div 
      ref={mapRef} 
      style={{ 
        height: 300, 
        borderRadius: 8, 
        overflow: 'hidden',
        border: '1px solid #d9d9d9'
      }} 
    />
  );
};

export default EventMap;
