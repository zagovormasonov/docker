import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';

export interface AuthRequest extends Request {
  userId?: number;
  userType?: string;
}

export const authenticateToken = (
  req: AuthRequest,
  res: Response,
  next: NextFunction
) => {
  console.log('üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  console.log('üé´ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', !!token);

  if (!token) {
    console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
    return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
  }

  jwt.verify(token, process.env.JWT_SECRET || 'secret', (err: any, user: any) => {
    if (err) {
      console.log('‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω:', err.message);
      return res.status(403).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }

    console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.userId, '—Ç–∏–ø:', user.userType || user.user_type);
    req.userId = user.userId;
    req.userType = user.userType || user.user_type;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if (!req.userId) {
      console.log('‚ùå userId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–∫–µ–Ω–µ');
      return res.status(403).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç userId' });
    }
    
    next();
  });
};

export const requireExpert = async (
  req: AuthRequest,
  res: Response,
  next: NextFunction
) => {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —ç–∫—Å–ø–µ—Ä—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.userId, '—Ç–∏–ø:', req.userType);
  
  if (req.userType !== 'expert') {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —ç–∫—Å–ø–µ—Ä—Ç–æ–º –ø–æ —Ç–æ–∫–µ–Ω—É');
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤' });
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  try {
    const { query } = await import('../config/database');
    const result = await query(
      'SELECT user_type FROM users WHERE id = $1',
      [req.userId]
    );
    
    if (result.rows.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const dbUserType = result.rows[0].user_type;
    if (dbUserType !== 'expert') {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —ç–∫—Å–ø–µ—Ä—Ç–æ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', dbUserType);
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤' });
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç');
    next();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ —ç–∫—Å–ø–µ—Ä—Ç–∞:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞' });
  }
};
