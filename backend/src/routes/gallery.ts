import express from 'express';
import multer from 'multer';
import path from 'path';
import fs from 'fs';
import { query } from '../config/database';
import { authenticateToken, AuthRequest } from '../middleware/auth';

const router = express.Router();

// –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –≥–∞–ª–µ—Ä–µ–∏
router.get('/test', authenticateToken, async (req: AuthRequest, res) => {
  try {
    console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≥–∞–ª–µ—Ä–µ–∏');
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:', req.userId);
    console.log('üë§ –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.userType);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    const tableCheck = await query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'profile_gallery'
      )
    `);
    
    console.log('üìä –¢–∞–±–ª–∏—Ü–∞ profile_gallery —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', tableCheck.rows[0].exists);
    
    res.json({
      message: '–ì–∞–ª–µ—Ä–µ—è —Ä–∞–±–æ—Ç–∞–µ—Ç',
      userId: req.userId,
      userType: req.userType,
      tableExists: tableCheck.rows[0].exists
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ' + error.message });
  }
});

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É gallery –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const galleryDir = path.join(__dirname, '../../uploads/gallery');
console.log('üìÅ –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –≥–∞–ª–µ—Ä–µ–∏:', galleryDir);

if (!fs.existsSync(galleryDir)) {
  console.log('üìÅ –°–æ–∑–¥–∞—é –ø–∞–ø–∫—É gallery...');
  try {
    fs.mkdirSync(galleryDir, { recursive: true });
    console.log('‚úÖ –ü–∞–ø–∫–∞ gallery —Å–æ–∑–¥–∞–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ gallery:', error);
  }
} else {
  console.log('‚úÖ –ü–∞–ø–∫–∞ gallery —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, galleryDir);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const ext = path.extname(file.originalname);
    cb(null, `gallery-${uniqueSuffix}${ext}`);
  }
});

// –§–∏–ª—å—Ç—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const fileFilter = (req: any, file: any, cb: any) => {
  const allowedTypes = /jpeg|jpg|png|gif|webp/;
  const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
  const mimetype = allowedTypes.test(file.mimetype);

  if (mimetype && extname) {
    return cb(null, true);
  } else {
    cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã (jpeg, jpg, png, gif, webp)'));
  }
};

const upload = multer({
  storage: storage,
  limits: { fileSize: 10 * 1024 * 1024 }, // 10MB –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  fileFilter: fileFilter
});

// –ü–æ–ª—É—á–∏—Ç—å –≥–∞–ª–µ—Ä–µ—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
router.get('/', authenticateToken, async (req: AuthRequest, res) => {
  try {
    console.log('üì∏ –ó–∞–ø—Ä–æ—Å –≥–∞–ª–µ—Ä–µ–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.userId);
    
    const result = await query(
      'SELECT * FROM profile_gallery WHERE user_id = $1 ORDER BY created_at DESC',
      [req.userId]
    );
    
    console.log('üì∏ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', result.rows.length);
    res.json(result.rows);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏:', error);
    console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≥–∞–ª–µ—Ä–µ—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
router.get('/user/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    console.log('üì∏ –ó–∞–ø—Ä–æ—Å –≥–∞–ª–µ—Ä–µ–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    const result = await query(
      'SELECT * FROM profile_gallery WHERE user_id = $1 ORDER BY created_at DESC',
      [userId]
    );
    
    console.log('üì∏ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userId, ':', result.rows.length);
    res.json(result.rows);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message });
  }
});

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≥–∞–ª–µ—Ä–µ—é
router.post('/upload', authenticateToken, upload.single('image'), async (req: AuthRequest, res) => {
  try {
    console.log('üì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –≤ –≥–∞–ª–µ—Ä–µ—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.userId);
    
    if (!req.file) {
      console.log('‚ùå –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }

    console.log('üìÅ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:', req.file.filename, '–†–∞–∑–º–µ—Ä:', req.file.size);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–º–∞–∫—Å–∏–º—É–º 20)
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...');
    const countResult = await query(
      'SELECT COUNT(*) as count FROM profile_gallery WHERE user_id = $1',
      [req.userId]
    );
    
    const currentCount = parseInt(countResult.rows[0].count);
    console.log('üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', currentCount);
    
    if (currentCount >= 20) {
      console.log('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
      // –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
      if (fs.existsSync(req.file.path)) {
        fs.unlinkSync(req.file.path);
      }
      return res.status(400).json({ error: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: 20' });
    }

    const imageUrl = `/uploads/gallery/${req.file.filename}`;
    console.log('üîó URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageUrl);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    const result = await query(
      `INSERT INTO profile_gallery (user_id, image_url, image_name, image_size) 
       VALUES ($1, $2, $3, $4) RETURNING *`,
      [req.userId, imageUrl, req.file.originalname, req.file.size]
    );

    console.log('‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –≥–∞–ª–µ—Ä–µ—é');
    res.json(result.rows[0]);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –≥–∞–ª–µ—Ä–µ—é:', error);
    console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
    console.error('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    
    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if (req.file && fs.existsSync(req.file.path)) {
      try {
        fs.unlinkSync(req.file.path);
        console.log('üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏');
      } catch (unlinkError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', unlinkError);
      }
    }
    
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message });
  }
});

// –£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏
router.delete('/:id', authenticateToken, async (req: AuthRequest, res) => {
  try {
    const { id } = req.params;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    const imageResult = await query(
      'SELECT * FROM profile_gallery WHERE id = $1 AND user_id = $2',
      [id, req.userId]
    );
    
    if (imageResult.rows.length === 0) {
      return res.status(404).json({ error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }
    
    const image = imageResult.rows[0];
    
    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
    const filePath = path.join(__dirname, '../../uploads/gallery', path.basename(image.image_url));
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
    }
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await query(
      'DELETE FROM profile_gallery WHERE id = $1 AND user_id = $2',
      [id, req.userId]
    );
    
    res.json({ message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≥–∞–ª–µ—Ä–µ–µ
router.get('/count', authenticateToken, async (req: AuthRequest, res) => {
  try {
    const result = await query(
      'SELECT COUNT(*) as count FROM profile_gallery WHERE user_id = $1',
      [req.userId]
    );
    
    res.json({ count: parseInt(result.rows[0].count) });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

export default router;
