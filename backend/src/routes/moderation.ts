import express from 'express';
import { query } from '../config/database';
import { authenticateToken, AuthRequest } from '../middleware/auth';

console.log('üìÅ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Ñ–∞–π–ª moderation.ts');

const router = express.Router();

// –ü—Ä–æ—Å—Ç–æ–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
router.get('/test', (req, res) => {
  res.json({ 
    message: '–ú–æ–¥–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    timestamp: new Date().toISOString()
  });
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const requireAdmin = async (req: AuthRequest, res: any, next: any) => {
  console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.userId);
  try {
    const result = await query(
      'SELECT user_type FROM users WHERE id = $1',
      [req.userId]
    );
    console.log('üë§ –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', result.rows[0]?.user_type);
    
    if (result.rows.length === 0 || result.rows[0].user_type !== 'admin') {
      console.log('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' });
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
    next();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
router.get('/articles', authenticateToken, requireAdmin, async (req: AuthRequest, res) => {
  console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.userId);
  try {
    // –ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–ª—è–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    let result;
    try {
      console.log('üîç –ò—â–µ–º —Å—Ç–∞—Ç—å–∏ —Å moderation_status = pending');
      result = await query(`
        SELECT a.*, u.name as author_name, u.email as author_email
        FROM articles a
        JOIN users u ON a.author_id = u.id
        WHERE a.moderation_status = 'pending'
        ORDER BY a.created_at DESC
      `);
      console.log('üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:', result.rows.length);
    } catch (error) {
      console.log('‚ùå –ü–æ–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:', error.message);
      result = { rows: [] };
    }
    
    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
router.get('/events', authenticateToken, requireAdmin, async (req: AuthRequest, res) => {
  console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.userId);
  try {
    // –ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–ª—è–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    let result;
    try {
      console.log('üîç –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è —Å moderation_status = pending');
      result = await query(`
        SELECT e.*, u.name as author_name, u.email as author_email
        FROM events e
        JOIN users u ON e.organizer_id = u.id
        WHERE e.moderation_status = 'pending'
        ORDER BY e.created_at DESC
      `);
      console.log('üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:', result.rows.length);
    } catch (error) {
      console.log('‚ùå –ü–æ–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:', error.message);
      result = { rows: [] };
    }
    
    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–¥–æ–±—Ä–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
router.post('/articles/:id/approve', authenticateToken, requireAdmin, async (req: AuthRequest, res) => {
  try {
    const { id } = req.params;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–∞—Ç—å–∏ –∏ –ø—É–±–ª–∏–∫—É–µ–º –µ—ë
    await query(
      'UPDATE articles SET moderation_status = $1, moderated_by = $2, moderated_at = CURRENT_TIMESTAMP, is_published = true WHERE id = $3',
      ['approved', req.userId, id]
    );
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –∏ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const authorResult = await query(`
      SELECT u.id, u.name, u.email, a.title
      FROM articles a
      JOIN users u ON a.author_id = u.id
      WHERE a.id = $1
    `, [id]);
    
    if (authorResult.rows.length > 0) {
      const author = authorResult.rows[0];
      
      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —á–∞—Ç —Å –∞–≤—Ç–æ—Ä–æ–º
      let chatResult = await query(
        'SELECT * FROM chats WHERE (user1_id = $1 AND user2_id = $2) OR (user1_id = $2 AND user2_id = $1)',
        [req.userId, author.id]
      );
      
      if (chatResult.rows.length === 0) {
        chatResult = await query(
          'INSERT INTO chats (user1_id, user2_id) VALUES ($1, $2) RETURNING *',
          [req.userId, author.id]
        );
      }
      
      const chatId = chatResult.rows[0].id;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏
      await query(
        'INSERT INTO messages (chat_id, sender_id, content, is_read) VALUES ($1, $2, $3, false)',
        [chatId, req.userId, `‚úÖ –í–∞—à–∞ —Å—Ç–∞—Ç—å—è "${author.title}" –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!`]
      );
    }
    
    res.json({ message: '–°—Ç–∞—Ç—å—è –æ–¥–æ–±—Ä–µ–Ω–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
router.post('/articles/:id/reject', authenticateToken, requireAdmin, async (req: AuthRequest, res) => {
  try {
    const { id } = req.params;
    const { reason } = req.body;
    
    if (!reason || reason.trim().length === 0) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è' });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–∞—Ç—å–∏
    await query(
      'UPDATE articles SET moderation_status = $1, moderation_reason = $2, moderated_by = $3, moderated_at = CURRENT_TIMESTAMP WHERE id = $4',
      ['rejected', reason, req.userId, id]
    );
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const authorResult = await query(`
      SELECT u.id, u.name, u.email, a.title
      FROM articles a
      JOIN users u ON a.author_id = u.id
      WHERE a.id = $1
    `, [id]);
    
    if (authorResult.rows.length > 0) {
      const author = authorResult.rows[0];
      
      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —á–∞—Ç —Å –∞–≤—Ç–æ—Ä–æ–º
      let chatResult = await query(
        'SELECT * FROM chats WHERE (user1_id = $1 AND user2_id = $2) OR (user1_id = $2 AND user2_id = $1)',
        [req.userId, author.id]
      );
      
      if (chatResult.rows.length === 0) {
        chatResult = await query(
          'INSERT INTO chats (user1_id, user2_id) VALUES ($1, $2) RETURNING *',
          [req.userId, author.id]
        );
      }
      
      const chatId = chatResult.rows[0].id;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
      await query(
        'INSERT INTO messages (chat_id, sender_id, content, is_read) VALUES ($1, $2, $3, false)',
        [chatId, req.userId, `‚ùå –í–∞—à–∞ —Å—Ç–∞—Ç—å—è "${author.title}" –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}`]
      );
    }
    
    res.json({ message: '–°—Ç–∞—Ç—å—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–¥–æ–±—Ä–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
console.log('üéØ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º endpoint POST /events/:id/approve');
router.post('/events/:id/approve', authenticateToken, requireAdmin, async (req: AuthRequest, res) => {
  console.log('üöÄ –ù–∞—á–∞–ª–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', req.params.id);
  console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', req.userId);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –≤ –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  const debugInfo = {
    eventId: req.params.id,
    userId: req.userId,
    timestamp: new Date().toISOString(),
    step: 'start'
  };
  
  try {
    const { id } = req.params;
    console.log('üìù ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è:', id);
    
    // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å –ø–æ–ª—è–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –±–µ–∑ –Ω–∏—Ö
    try {
      console.log('–ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å –ø–æ–ª—è–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:', id);
      await query(
        'UPDATE events SET moderation_status = $1, moderated_by = $2, moderated_at = CURRENT_TIMESTAMP, is_published = true WHERE id = $3',
        ['approved', req.userId, id]
      );
      console.log('–°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –ø–æ–ª—è–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
    } catch (error) {
      console.log('–ü–æ–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ is_published:', error.message);
      await query(
        'UPDATE events SET is_published = true WHERE id = $1',
        [id]
      );
      console.log('–°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –±–µ–∑ –ø–æ–ª–µ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –∏ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log('–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ —Å–æ–±—ã—Ç–∏—è:', id);
    const authorResult = await query(`
      SELECT u.id, u.name, u.email, e.title
      FROM events e
      JOIN users u ON e.organizer_id = u.id
      WHERE e.id = $1
    `, [id]);
    console.log('–ê–≤—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è:', authorResult.rows);
    
    if (authorResult.rows.length > 0) {
      const author = authorResult.rows[0];
      
      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —á–∞—Ç —Å –∞–≤—Ç–æ—Ä–æ–º
      console.log('–ò—â–µ–º —á–∞—Ç –º–µ–∂–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –∞–≤—Ç–æ—Ä–æ–º:', req.userId, author.id);
      let chatResult = await query(
        'SELECT * FROM chats WHERE (user1_id = $1 AND user2_id = $2) OR (user1_id = $2 AND user2_id = $1)',
        [req.userId, author.id]
      );
      console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–π —á–∞—Ç:', chatResult.rows);
      
      if (chatResult.rows.length === 0) {
        console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –º–µ–∂–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –∞–≤—Ç–æ—Ä–æ–º');
        chatResult = await query(
          'INSERT INTO chats (user1_id, user2_id) VALUES ($1, $2) RETURNING *',
          [req.userId, author.id]
        );
        console.log('–°–æ–∑–¥–∞–Ω–Ω—ã–π —á–∞—Ç:', chatResult.rows);
      }
      
      const chatId = chatResult.rows[0].id;
      console.log('ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', chatId);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è');
      await query(
        'INSERT INTO messages (chat_id, sender_id, content, is_read) VALUES ($1, $2, $3, false)',
        [chatId, req.userId, `‚úÖ –í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ "${author.title}" –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!`]
      );
      console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    }
    
    res.json({ 
      message: '–°–æ–±—ã—Ç–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ',
      debug: {
        ...debugInfo,
        step: 'success'
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      message: error.message,
      stack: error.stack,
      eventId: req.params.id,
      userId: req.userId
    });
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message,
      eventId: req.params.id,
      debug: {
        ...debugInfo,
        step: 'error',
        errorMessage: error.message,
        errorStack: error.stack
      }
    });
  }
});

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
router.post('/events/:id/reject', authenticateToken, requireAdmin, async (req: AuthRequest, res) => {
  try {
    const { id } = req.params;
    const { reason } = req.body;
    
    if (!reason || reason.trim().length === 0) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è' });
    }
    
    // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å –ø–æ–ª—è–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –±–µ–∑ –Ω–∏—Ö
    try {
      console.log('–ü—Ä–æ–±—É–µ–º –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å –ø–æ–ª—è–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:', id);
      await query(
        'UPDATE events SET moderation_status = $1, moderation_reason = $2, moderated_by = $3, moderated_at = CURRENT_TIMESTAMP WHERE id = $4',
        ['rejected', reason, req.userId, id]
      );
      console.log('–°–æ–±—ã—Ç–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ —Å –ø–æ–ª—è–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
    } catch (error) {
      console.log('–ü–æ–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ is_published:', error.message);
      await query(
        'UPDATE events SET is_published = false WHERE id = $1',
        [id]
      );
      console.log('–°–æ–±—ã—Ç–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –±–µ–∑ –ø–æ–ª–µ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const authorResult = await query(`
      SELECT u.id, u.name, u.email, e.title
      FROM events e
      JOIN users u ON e.organizer_id = u.id
      WHERE e.id = $1
    `, [id]);
    
    if (authorResult.rows.length > 0) {
      const author = authorResult.rows[0];
      
      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —á–∞—Ç —Å –∞–≤—Ç–æ—Ä–æ–º
      let chatResult = await query(
        'SELECT * FROM chats WHERE (user1_id = $1 AND user2_id = $2) OR (user1_id = $2 AND user2_id = $1)',
        [req.userId, author.id]
      );
      
      if (chatResult.rows.length === 0) {
        chatResult = await query(
          'INSERT INTO chats (user1_id, user2_id) VALUES ($1, $2) RETURNING *',
          [req.userId, author.id]
        );
      }
      
      const chatId = chatResult.rows[0].id;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
      await query(
        'INSERT INTO messages (chat_id, sender_id, content, is_read) VALUES ($1, $2, $3, false)',
        [chatId, req.userId, `‚ùå –í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ "${author.title}" –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\n\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}`]
      );
    }
    
    res.json({ message: '–°–æ–±—ã—Ç–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      message: error.message,
      stack: error.stack,
      eventId: req.params.id,
      userId: req.userId
    });
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message,
      eventId: req.params.id
    });
  }
});

export default router;
