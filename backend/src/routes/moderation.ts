import express from 'express';
import { query } from '../config/database';
import { authenticateToken, AuthRequest } from '../middleware/auth';

console.log('üìÅ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Ñ–∞–π–ª moderation.ts');

const router = express.Router();

// –ü—Ä–æ—Å—Ç–æ–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
router.get('/test', (req, res) => {
  res.json({ 
    message: '–ú–æ–¥–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    timestamp: new Date().toISOString()
  });
});

// Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏
router.get('/check-fields', async (req, res) => {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ events
    let eventsResult;
    try {
      eventsResult = await query(`
        SELECT column_name, data_type 
        FROM information_schema.columns 
        WHERE table_name = 'events' 
        AND column_name IN ('moderation_status', 'is_published', 'moderated_by', 'moderated_at')
      `);
    } catch (error) {
      eventsResult = { rows: [] };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ articles
    let articlesResult;
    try {
      articlesResult = await query(`
        SELECT column_name, data_type 
        FROM information_schema.columns 
        WHERE table_name = 'articles' 
        AND column_name IN ('moderation_status', 'is_published', 'moderated_by', 'moderated_at')
      `);
    } catch (error) {
      articlesResult = { rows: [] };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    let pendingEvents;
    try {
      pendingEvents = await query(`
        SELECT COUNT(*) as count 
        FROM events 
        WHERE moderation_status = 'pending'
      `);
    } catch (error) {
      pendingEvents = { rows: [{ count: 0 }] };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—å–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    let pendingArticles;
    try {
      pendingArticles = await query(`
        SELECT COUNT(*) as count 
        FROM articles 
        WHERE moderation_status = 'pending'
      `);
    } catch (error) {
      pendingArticles = { rows: [{ count: 0 }] };
    }
    
    res.json({
      message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
      timestamp: new Date().toISOString(),
      eventsFields: eventsResult.rows,
      articlesFields: articlesResult.rows,
      pendingEvents: pendingEvents.rows[0].count,
      pendingArticles: pendingArticles.rows[0].count
    });
  } catch (error) {
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Endpoint –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–≥–æ –ø–æ–ª—è is_published –≤ events
router.get('/fix-events-published', async (req, res) => {
  try {
    console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ is_published –≤ —Ç–∞–±–ª–∏—Ü—É events');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ is_published –≤ —Ç–∞–±–ª–∏—Ü—É events
    await query(`
      ALTER TABLE events 
      ADD COLUMN IF NOT EXISTS is_published BOOLEAN DEFAULT false
    `);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è
    await query(`
      UPDATE events 
      SET is_published = true 
      WHERE moderation_status = 'approved' OR moderation_status IS NULL
    `);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const checkResult = await query(`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'events' 
      AND column_name IN ('moderation_status', 'is_published', 'moderated_by', 'moderated_at')
      ORDER BY column_name
    `);
    
    res.json({
      message: '–ü–æ–ª–µ is_published –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É events',
      timestamp: new Date().toISOString(),
      success: true,
      eventsFields: checkResult.rows
    });
  } catch (error) {
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è is_published',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Endpoint –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è is_published
router.get('/force-add-published', async (req, res) => {
  try {
    console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ is_published –≤ —Ç–∞–±–ª–∏—Ü—É events');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª–µ
    const checkResult = await query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'events' 
      AND column_name = 'is_published'
    `);
    
    if (checkResult.rows.length === 0) {
      console.log('–ü–æ–ª–µ is_published –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º...');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ is_published –≤ —Ç–∞–±–ª–∏—Ü—É events
      await query(`
        ALTER TABLE events 
        ADD COLUMN is_published BOOLEAN DEFAULT false
      `);
      
      console.log('–ü–æ–ª–µ is_published –¥–æ–±–∞–≤–ª–µ–Ω–æ');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è
      await query(`
        UPDATE events 
        SET is_published = true 
        WHERE moderation_status = 'approved' OR moderation_status IS NULL
      `);
      
      console.log('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } else {
      console.log('–ü–æ–ª–µ is_published —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const finalResult = await query(`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'events' 
      AND column_name IN ('moderation_status', 'is_published', 'moderated_by', 'moderated_at')
      ORDER BY column_name
    `);
    
    res.json({
      message: '–ü–æ–ª–µ is_published –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É events',
      timestamp: new Date().toISOString(),
      success: true,
      eventsFields: finalResult.rows,
      wasAdded: checkResult.rows.length === 0
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è is_published:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è is_published',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const requireAdmin = async (req: AuthRequest, res: any, next: any) => {
  console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.userId);
  try {
    const result = await query(
      'SELECT user_type FROM users WHERE id = $1',
      [req.userId]
    );
    console.log('üë§ –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', result.rows[0]?.user_type);
    
    if (result.rows.length === 0 || result.rows[0].user_type !== 'admin') {
      console.log('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' });
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
    next();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// Endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
router.post('/test-reject/:id', authenticateToken, requireAdmin, async (req: AuthRequest, res) => {
  try {
    const { id } = req.params;
    const { reason } = req.body;
    
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:', {
      eventId: id,
      reason: reason,
      userId: req.userId,
      body: req.body
    });
    
    res.json({
      message: '–¢–µ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è',
      debug: {
        eventId: id,
        reason: reason,
        userId: req.userId,
        timestamp: new Date().toISOString()
      }
    });
  } catch (error) {
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
router.post('/test-approve/:id', authenticateToken, requireAdmin, async (req: AuthRequest, res) => {
  try {
    const { id } = req.params;
    
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:', {
      eventId: id,
      userId: req.userId
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ
    const eventResult = await query('SELECT id, title, organizer_id FROM events WHERE id = $1', [id]);
    
    if (eventResult.rows.length === 0) {
      return res.status(404).json({
        error: '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        eventId: id
      });
    }
    
    const event = eventResult.rows[0];
    
    res.json({
      message: '–¢–µ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è',
      debug: {
        eventId: id,
        userId: req.userId,
        event: event,
        timestamp: new Date().toISOString()
      }
    });
  } catch (error) {
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–æ–±—Ä–µ–Ω–∏—è',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// –ü—Ä–æ—Å—Ç–æ–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
router.get('/test-approve-simple/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    console.log('üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ
    const eventResult = await query('SELECT id, title, organizer_id, is_published, moderation_status FROM events WHERE id = $1', [id]);
    
    if (eventResult.rows.length === 0) {
      return res.status(404).json({
        error: '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        eventId: id
      });
    }
    
    const event = eventResult.rows[0];
    
    res.json({
      message: '–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è',
      debug: {
        eventId: id,
        event: event,
        timestamp: new Date().toISOString()
      }
    });
  } catch (error) {
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–æ–±—Ä–µ–Ω–∏—è',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
router.get('/articles', authenticateToken, requireAdmin, async (req: AuthRequest, res) => {
  console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.userId);
  try {
    // –ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–ª—è–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    let result;
    try {
      console.log('üîç –ò—â–µ–º —Å—Ç–∞—Ç—å–∏ —Å moderation_status = pending');
      result = await query(`
        SELECT a.*, u.name as author_name, u.email as author_email
        FROM articles a
        JOIN users u ON a.author_id = u.id
        WHERE a.moderation_status = 'pending'
        ORDER BY a.created_at DESC
      `);
      console.log('üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:', result.rows.length);
    } catch (error) {
      console.log('‚ùå –ü–æ–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:', error.message);
      result = { rows: [] };
    }
    
    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
router.get('/events', authenticateToken, requireAdmin, async (req: AuthRequest, res) => {
  console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.userId);
  try {
    // –ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–ª—è–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    let result;
    try {
      console.log('üîç –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è —Å moderation_status = pending');
      result = await query(`
        SELECT e.*, u.name as author_name, u.email as author_email
        FROM events e
        JOIN users u ON e.organizer_id = u.id
        WHERE e.moderation_status = 'pending'
        ORDER BY e.created_at DESC
      `);
      console.log('üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:', result.rows.length);
    } catch (error) {
      console.log('‚ùå –ü–æ–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:', error.message);
      result = { rows: [] };
    }
    
    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–¥–æ–±—Ä–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
router.post('/articles/:id/approve', authenticateToken, requireAdmin, async (req: AuthRequest, res) => {
  try {
    const { id } = req.params;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–∞—Ç—å–∏ –∏ –ø—É–±–ª–∏–∫—É–µ–º –µ—ë
    await query(
      'UPDATE articles SET moderation_status = $1, moderated_by = $2, moderated_at = CURRENT_TIMESTAMP, is_published = true WHERE id = $3',
      ['approved', req.userId, id]
    );
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –∏ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const authorResult = await query(`
      SELECT u.id, u.name, u.email, a.title
      FROM articles a
      JOIN users u ON a.author_id = u.id
      WHERE a.id = $1
    `, [id]);
    
    if (authorResult.rows.length > 0) {
      const author = authorResult.rows[0];
      
      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —á–∞—Ç —Å –∞–≤—Ç–æ—Ä–æ–º
      let chatResult = await query(
        'SELECT * FROM chats WHERE (user1_id = $1 AND user2_id = $2) OR (user1_id = $2 AND user2_id = $1)',
        [req.userId, author.id]
      );
      
      if (chatResult.rows.length === 0) {
        chatResult = await query(
          'INSERT INTO chats (user1_id, user2_id) VALUES ($1, $2) RETURNING *',
          [req.userId, author.id]
        );
      }
      
      const chatId = chatResult.rows[0].id;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏
      await query(
        'INSERT INTO messages (chat_id, sender_id, content, is_read) VALUES ($1, $2, $3, false)',
        [chatId, req.userId, `‚úÖ –í–∞—à–∞ —Å—Ç–∞—Ç—å—è "${author.title}" –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!`]
      );
    }
    
    res.json({ message: '–°—Ç–∞—Ç—å—è –æ–¥–æ–±—Ä–µ–Ω–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
router.post('/articles/:id/reject', authenticateToken, requireAdmin, async (req: AuthRequest, res) => {
  try {
    const { id } = req.params;
    const { reason } = req.body;
    
    if (!reason || reason.trim().length === 0) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è' });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–∞—Ç—å–∏
    await query(
      'UPDATE articles SET moderation_status = $1, moderation_reason = $2, moderated_by = $3, moderated_at = CURRENT_TIMESTAMP WHERE id = $4',
      ['rejected', reason, req.userId, id]
    );
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const authorResult = await query(`
      SELECT u.id, u.name, u.email, a.title
      FROM articles a
      JOIN users u ON a.author_id = u.id
      WHERE a.id = $1
    `, [id]);
    
    if (authorResult.rows.length > 0) {
      const author = authorResult.rows[0];
      
      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —á–∞—Ç —Å –∞–≤—Ç–æ—Ä–æ–º
      let chatResult = await query(
        'SELECT * FROM chats WHERE (user1_id = $1 AND user2_id = $2) OR (user1_id = $2 AND user2_id = $1)',
        [req.userId, author.id]
      );
      
      if (chatResult.rows.length === 0) {
        chatResult = await query(
          'INSERT INTO chats (user1_id, user2_id) VALUES ($1, $2) RETURNING *',
          [req.userId, author.id]
        );
      }
      
      const chatId = chatResult.rows[0].id;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
      await query(
        'INSERT INTO messages (chat_id, sender_id, content, is_read) VALUES ($1, $2, $3, false)',
        [chatId, req.userId, `‚ùå –í–∞—à–∞ —Å—Ç–∞—Ç—å—è "${author.title}" –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}`]
      );
    }
    
    res.json({ message: '–°—Ç–∞—Ç—å—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–¥–æ–±—Ä–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
console.log('üéØ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º endpoint POST /events/:id/approve');
router.post('/events/:id/approve', authenticateToken, requireAdmin, async (req: AuthRequest, res) => {
  console.log('üöÄ –ù–∞—á–∞–ª–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', req.params.id);
  console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', req.userId);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –≤ –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  const debugInfo = {
    eventId: req.params.id,
    userId: req.userId,
    timestamp: new Date().toISOString(),
    step: 'start'
  };
  
  try {
    const { id } = req.params;
    console.log('üìù ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è:', id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ events
    const structureCheck = await query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'events'
    `);
    
    const hasModerationStatus = structureCheck.rows.some(row => row.column_name === 'moderation_status');
    const hasIsPublished = structureCheck.rows.some(row => row.column_name === 'is_published');
    
    console.log('üìä moderation_status —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', hasModerationStatus);
    console.log('üìä is_published —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', hasIsPublished);
    
    // –°—Ç—Ä–æ–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å UPDATE
    let updateFields = [];
    let queryParams = [];
    let paramIndex = 1;
    
    if (hasModerationStatus) {
      updateFields.push(`moderation_status = $${paramIndex}`);
      queryParams.push('approved');
      paramIndex++;
      
      updateFields.push(`moderated_by = $${paramIndex}`);
      queryParams.push(req.userId);
      paramIndex++;
      
      updateFields.push(`moderated_at = CURRENT_TIMESTAMP`);
    }
    
    if (hasIsPublished) {
      updateFields.push(`is_published = $${paramIndex}`);
      queryParams.push(true);
      paramIndex++;
    }
    
    if (updateFields.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return res.json({ success: true, message: '–°–æ–±—ã—Ç–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ (–Ω–µ—Ç –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)' });
    }
    
    queryParams.push(id);
    
    const updateQuery = `UPDATE events SET ${updateFields.join(', ')} WHERE id = $${paramIndex}`;
    console.log('üîç –í—ã–ø–æ–ª–Ω—è–µ–º UPDATE –∑–∞–ø—Ä–æ—Å:', updateQuery);
    
    await query(updateQuery, queryParams);
    console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –∏ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log('–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ —Å–æ–±—ã—Ç–∏—è:', id);
    const authorResult = await query(`
      SELECT u.id, u.name, u.email, e.title
      FROM events e
      JOIN users u ON e.organizer_id = u.id
      WHERE e.id = $1
    `, [id]);
    console.log('–ê–≤—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è:', authorResult.rows);
    
    if (authorResult.rows.length > 0) {
      const author = authorResult.rows[0];
      
      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —á–∞—Ç —Å –∞–≤—Ç–æ—Ä–æ–º
      console.log('–ò—â–µ–º —á–∞—Ç –º–µ–∂–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –∞–≤—Ç–æ—Ä–æ–º:', req.userId, author.id);
      let chatResult = await query(
        'SELECT * FROM chats WHERE (user1_id = $1 AND user2_id = $2) OR (user1_id = $2 AND user2_id = $1)',
        [req.userId, author.id]
      );
      console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–π —á–∞—Ç:', chatResult.rows);
      
      if (chatResult.rows.length === 0) {
        console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –º–µ–∂–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –∞–≤—Ç–æ—Ä–æ–º');
        chatResult = await query(
          'INSERT INTO chats (user1_id, user2_id) VALUES ($1, $2) RETURNING *',
          [req.userId, author.id]
        );
        console.log('–°–æ–∑–¥–∞–Ω–Ω—ã–π —á–∞—Ç:', chatResult.rows);
      }
      
      const chatId = chatResult.rows[0].id;
      console.log('ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', chatId);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è');
      await query(
        'INSERT INTO messages (chat_id, sender_id, content, is_read) VALUES ($1, $2, $3, false)',
        [chatId, req.userId, `‚úÖ –í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ "${author.title}" –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!`]
      );
      console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    }
    
    res.json({ 
      message: '–°–æ–±—ã—Ç–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ',
      debug: {
        ...debugInfo,
        step: 'success'
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      message: error.message,
      stack: error.stack,
      eventId: req.params.id,
      userId: req.userId
    });
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message,
      eventId: req.params.id,
      debug: {
        ...debugInfo,
        step: 'error',
        errorMessage: error.message,
        errorStack: error.stack
      }
    });
  }
});

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
router.post('/events/:id/reject', authenticateToken, requireAdmin, async (req: AuthRequest, res) => {
  // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
  res.set({
    'Cache-Control': 'no-cache, no-store, must-revalidate',
    'Pragma': 'no-cache',
    'Expires': '0'
  });
  
  try {
    const { id } = req.params;
    const { reason } = req.body;
    
    console.log('üö´ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ:', {
      eventId: id,
      reason: reason,
      userId: req.userId,
      body: req.body
    });
    
    if (!reason || reason.trim().length === 0) {
      console.log('‚ùå –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞');
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ events
    const structureCheck = await query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'events'
    `);
    
    const hasModerationStatus = structureCheck.rows.some(row => row.column_name === 'moderation_status');
    const hasIsPublished = structureCheck.rows.some(row => row.column_name === 'is_published');
    
    console.log('üìä moderation_status —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', hasModerationStatus);
    console.log('üìä is_published —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', hasIsPublished);
    
    // –°—Ç—Ä–æ–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å UPDATE
    let updateFields = [];
    let queryParams = [];
    let paramIndex = 1;
    
    if (hasModerationStatus) {
      updateFields.push(`moderation_status = $${paramIndex}`);
      queryParams.push('rejected');
      paramIndex++;
      
      updateFields.push(`moderation_reason = $${paramIndex}`);
      queryParams.push(reason);
      paramIndex++;
      
      updateFields.push(`moderated_by = $${paramIndex}`);
      queryParams.push(req.userId);
      paramIndex++;
      
      updateFields.push(`moderated_at = CURRENT_TIMESTAMP`);
    }
    
    if (hasIsPublished) {
      updateFields.push(`is_published = $${paramIndex}`);
      queryParams.push(false);
      paramIndex++;
    }
    
    if (updateFields.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return res.json({ success: true, message: '–°–æ–±—ã—Ç–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ (–Ω–µ—Ç –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)' });
    }
    
    queryParams.push(id);
    
    const updateQuery = `UPDATE events SET ${updateFields.join(', ')} WHERE id = $${paramIndex}`;
    console.log('üîç –í—ã–ø–æ–ª–Ω—è–µ–º UPDATE –∑–∞–ø—Ä–æ—Å:', updateQuery);
    
    await query(updateQuery, queryParams);
    console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log('–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', id);
    const authorResult = await query(`
      SELECT u.id, u.name, u.email, e.title
      FROM events e
      JOIN users u ON e.organizer_id = u.id
      WHERE e.id = $1
    `, [id]);
    console.log('–ê–≤—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', authorResult.rows);
    
    if (authorResult.rows.length > 0) {
      const author = authorResult.rows[0];
      
      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —á–∞—Ç —Å –∞–≤—Ç–æ—Ä–æ–º
      console.log('–ò—â–µ–º —á–∞—Ç –º–µ–∂–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –∞–≤—Ç–æ—Ä–æ–º –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', req.userId, author.id);
      let chatResult = await query(
        'SELECT * FROM chats WHERE (user1_id = $1 AND user2_id = $2) OR (user1_id = $2 AND user2_id = $1)',
        [req.userId, author.id]
      );
      console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–π —á–∞—Ç –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', chatResult.rows);
      
      if (chatResult.rows.length === 0) {
        console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –º–µ–∂–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –∞–≤—Ç–æ—Ä–æ–º –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
        chatResult = await query(
          'INSERT INTO chats (user1_id, user2_id) VALUES ($1, $2) RETURNING *',
          [req.userId, author.id]
        );
        console.log('–°–æ–∑–¥–∞–Ω–Ω—ã–π —á–∞—Ç –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', chatResult.rows);
      }
      
      const chatId = chatResult.rows[0].id;
      console.log('ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏:', chatId);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è');
      await query(
        'INSERT INTO messages (chat_id, sender_id, content, is_read) VALUES ($1, $2, $3, false)',
        [chatId, req.userId, `‚ùå –í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ "${author.title}" –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\n\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}`]
      );
      console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } else {
      console.log('–ê–≤—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
    }
    
    console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ:', id);
    res.json({ 
      message: '–°–æ–±—ã—Ç–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ',
      debug: {
        eventId: id,
        userId: req.userId,
        reason: reason,
        timestamp: new Date().toISOString()
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      message: error.message,
      stack: error.stack,
      eventId: req.params.id,
      userId: req.userId,
      reason: req.body.reason
    });
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message,
      eventId: req.params.id,
      debug: {
        eventId: req.params.id,
        userId: req.userId,
        reason: req.body.reason,
        timestamp: new Date().toISOString()
      }
    });
  }
});

export default router;
