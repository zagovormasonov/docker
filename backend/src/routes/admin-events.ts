import express from 'express';
import { body, validationResult } from 'express-validator';
import { authenticateToken } from '../middleware/auth';
import { query } from '../config/database';
import { createEventEditedNotification, createEventDeletedNotification } from '../utils/notifications';

const router = express.Router();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const requireAdmin = (req: any, res: any, next: any) => {
  if (req.userType !== 'admin') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' });
  }
  next();
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ—Ä–∞—Ö
router.get('/', authenticateToken, requireAdmin, async (req, res) => {
  try {
    console.log('üîç –ó–∞–ø—Ä–æ—Å —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ events
    const tableCheck = await query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'events'
      );
    `);
    
    console.log('üìä –¢–∞–±–ª–∏—Ü–∞ events —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', tableCheck.rows[0].exists);
    
    if (!tableCheck.rows[0].exists) {
      return res.json({ success: true, events: [] });
    }
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã events
    const structureCheck = await query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'events'
    `);
    
    console.log('üìä –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ events:', structureCheck.rows.map(r => r.column_name));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ author_id
    const hasAuthorId = structureCheck.rows.some(row => row.column_name === 'author_id');
    const hasIsPublished = structureCheck.rows.some(row => row.column_name === 'is_published');
    const hasOrganizerId = structureCheck.rows.some(row => row.column_name === 'organizer_id');
    
    console.log('üìä author_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', hasAuthorId);
    console.log('üìä is_published —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', hasIsPublished);
    console.log('üìä organizer_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', hasOrganizerId);
    
    let queryString;
    let queryParams = [];
    
    if (hasAuthorId) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å author_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º JOIN —Å users
      if (hasIsPublished) {
        queryString = `
          SELECT 
            e.*,
            u.name as author_name,
            u.email as author_email,
            CASE WHEN e.is_published = true THEN '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' ELSE '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏' END as status
          FROM events e
          LEFT JOIN users u ON e.author_id = u.id
          ORDER BY e.id DESC
        `;
      } else {
        queryString = `
          SELECT 
            e.*,
            u.name as author_name,
            u.email as author_email,
            '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏' as status
          FROM events e
          LEFT JOIN users u ON e.author_id = u.id
          ORDER BY e.id DESC
        `;
      }
    } else if (hasOrganizerId) {
      // –ï—Å–ª–∏ –Ω–µ—Ç author_id, –Ω–æ –µ—Å—Ç—å organizer_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      console.log('‚ö†Ô∏è author_id –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º organizer_id');
      if (hasIsPublished) {
        queryString = `
          SELECT 
            e.*,
            u.name as author_name,
            u.email as author_email,
            CASE WHEN e.is_published = true THEN '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' ELSE '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏' END as status
          FROM events e
          LEFT JOIN users u ON e.organizer_id = u.id
          ORDER BY e.id DESC
        `;
      } else {
        queryString = `
          SELECT 
            e.*,
            u.name as author_name,
            u.email as author_email,
            '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏' as status
          FROM events e
          LEFT JOIN users u ON e.organizer_id = u.id
          ORDER BY e.id DESC
        `;
      }
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ author_id, –Ω–∏ organizer_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      console.log('‚ö†Ô∏è –ù–µ—Ç –Ω–∏ author_id, –Ω–∏ organizer_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è');
      if (hasIsPublished) {
        queryString = `
          SELECT 
            e.*,
            '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä' as author_name,
            'unknown@example.com' as author_email,
            CASE WHEN e.is_published = true THEN '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' ELSE '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏' END as status
          FROM events e
          ORDER BY e.id DESC
        `;
      } else {
        queryString = `
          SELECT 
            e.*,
            '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä' as author_name,
            'unknown@example.com' as author_email,
            '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏' as status
          FROM events e
          ORDER BY e.id DESC
        `;
      }
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    console.log('üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å:', queryString);
    const result = await query(queryString, queryParams);
    console.log('‚úÖ –°–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', result.rows.length);
    
    res.json({ success: true, events: result.rows });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
router.put('/:id', authenticateToken, requireAdmin, [
  body('title').trim().isLength({ min: 1 }).withMessage('–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
  body('description').trim().isLength({ min: 1 }).withMessage('–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
  body('location').trim().isLength({ min: 1 }).withMessage('–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
  body('event_date').isISO8601().withMessage('–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601'),
  body('price').optional().trim(),
  body('registration_link').optional().isURL().withMessage('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º URL'),
  body('cover_image').optional().isString().withMessage('–û–±–ª–æ–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π').custom((value) => {
    if (value && !value.startsWith('/uploads/')) {
      throw new Error('–û–±–ª–æ–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É –≤ –ø–∞–ø–∫–µ uploads');
    }
    return true;
  }),
  body('is_published').optional().isBoolean().withMessage('–°—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å boolean')
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ success: false, message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', errors: errors.array() });
    }

    const { id } = req.params;
    const { title, description, location, event_date, price, registration_link, cover_image, is_published } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ
    const eventCheck = await query('SELECT * FROM events WHERE id = $1', [id]);
    if (eventCheck.rows.length === 0) {
      return res.status(404).json({ success: false, message: '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    const event = eventCheck.rows[0];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const structureCheck = await query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'events'
    `);
    
    const hasIsPublished = structureCheck.rows.some(row => row.column_name === 'is_published');
    const hasUpdatedAt = structureCheck.rows.some(row => row.column_name === 'updated_at');
    
    // –°—Ç—Ä–æ–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å UPDATE
    let updateFields = ['title = $2', 'description = $3', 'location = $4', 'event_date = $5', 'price = $6', 'registration_link = $7', 'cover_image = $8'];
    let queryParams = [id, title, description, location, event_date, price, registration_link, cover_image];
    let paramIndex = 9;
    
    if (hasIsPublished) {
      updateFields.push(`is_published = $${paramIndex}`);
      queryParams.push(is_published);
      paramIndex++;
    }
    
    if (hasUpdatedAt) {
      updateFields.push(`updated_at = CURRENT_TIMESTAMP`);
    }
    
    const updateQuery = `UPDATE events SET ${updateFields.join(', ')} WHERE id = $1 RETURNING *`;
    
    console.log('üîç –í—ã–ø–æ–ª–Ω—è–µ–º UPDATE –∑–∞–ø—Ä–æ—Å:', updateQuery);
    const result = await query(updateQuery, queryParams);
    
    if (result.rows.length === 0) {
      return res.status(404).json({ success: false, message: '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    const updatedEvent = result.rows[0];

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    try {
      const authorId = event.author_id || event.organizer_id;
      if (authorId) {
        await createEventEditedNotification(authorId, updatedEvent.title, is_published);
        console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ—Ä—É:', authorId);
      }
    } catch (notificationError) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notificationError);
    }

    res.json({ success: true, message: '–°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', event: updatedEvent });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
});

// –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
router.delete('/:id', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { id } = req.params;

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const eventCheck = await query('SELECT * FROM events WHERE id = $1', [id]);
    if (eventCheck.rows.length === 0) {
      return res.status(404).json({ success: false, message: '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    const event = eventCheck.rows[0];

    // –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
    await query('DELETE FROM events WHERE id = $1', [id]);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
    try {
      const authorId = event.author_id || event.organizer_id;
      if (authorId) {
        await createEventDeletedNotification(authorId, event.title);
        console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ—Ä—É:', authorId);
      }
    } catch (notificationError) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notificationError);
    }

    res.json({ success: true, message: '–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
});

export default router;