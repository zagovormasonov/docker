import express from 'express';
import { body, validationResult } from 'express-validator';
import { authenticateToken } from '../middleware/auth';
import { query } from '../config/database';
import { createEventEditedNotification, createEventDeletedNotification } from '../utils/notifications';

const router = express.Router();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const requireAdmin = (req: any, res: any, next: any) => {
  if (req.userType !== 'admin') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' });
  }
  next();
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ—Ä–∞—Ö
router.get('/', authenticateToken, requireAdmin, async (req, res) => {
  try {
    console.log('üîç –ó–∞–ø—Ä–æ—Å —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ events
    const tableCheck = await query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'events'
      );
    `);
    
    console.log('üìä –¢–∞–±–ª–∏—Ü–∞ events —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', tableCheck.rows[0].exists);
    
    if (!tableCheck.rows[0].exists) {
      return res.json({ success: true, events: [] });
    }
    
    const result = await query(`
      SELECT 
        e.*,
        u.name as author_name,
        u.email as author_email,
        CASE WHEN e.is_published = true THEN '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' ELSE '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏' END as status
      FROM events e
      JOIN users u ON e.author_id = u.id
      ORDER BY e.created_at DESC
    `);
    
    console.log('‚úÖ –°–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', result.rows.length);
    res.json({ success: true, events: result.rows });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
});

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
router.put('/:id', authenticateToken, requireAdmin, [
  body('title').trim().isLength({ min: 5 }).withMessage('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤'),
  body('description').trim().isLength({ min: 20 }).withMessage('–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤'),
  body('location').trim().isLength({ min: 3 }).withMessage('–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞'),
  body('event_date').isISO8601().withMessage('–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO8601'),
  body('is_published').isBoolean().withMessage('–°—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å boolean')
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ success: false, errors: errors.array() });
    }

    const { id } = req.params;
    const { title, description, location, event_date, is_published } = req.body;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –∏ –∞–≤—Ç–æ—Ä–µ
    const eventResult = await query(`
      SELECT e.*, u.name as author_name, u.email as author_email
      FROM events e
      JOIN users u ON e.author_id = u.id
      WHERE e.id = $1
    `, [id]);

    if (eventResult.rows.length === 0) {
      return res.status(404).json({ success: false, message: '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    const event = eventResult.rows[0];

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
    await query(`
      UPDATE events 
      SET title = $1, description = $2, location = $3, event_date = $4, is_published = $5, updated_at = CURRENT_TIMESTAMP
      WHERE id = $6
    `, [title, description, location, event_date, is_published, id]);

    // –°–æ–∑–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∞
    await createEventEditedNotification(event.author_id, title, is_published);

    res.json({ 
      success: true, 
      message: '–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
      event: {
        id: parseInt(id),
        title,
        description,
        location,
        event_date,
        is_published,
        author_name: event.author_name
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
router.delete('/:id', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { id } = req.params;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –∏ –∞–≤—Ç–æ—Ä–µ
    const eventResult = await query(`
      SELECT e.*, u.name as author_name, u.email as author_email
      FROM events e
      JOIN users u ON e.author_id = u.id
      WHERE e.id = $1
    `, [id]);

    if (eventResult.rows.length === 0) {
      return res.status(404).json({ success: false, message: '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    const event = eventResult.rows[0];

    // –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
    await query('DELETE FROM events WHERE id = $1', [id]);

    // –°–æ–∑–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∞
    await createEventDeletedNotification(event.author_id, event.title);

    res.json({ 
      success: true, 
      message: '–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ',
      deleted_event: {
        id: parseInt(id),
        title: event.title,
        author_name: event.author_name
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è
router.get('/:id', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { id } = req.params;
    
    const result = await query(`
      SELECT 
        e.*,
        u.name as author_name,
        u.email as author_email
      FROM events e
      JOIN users u ON e.author_id = u.id
      WHERE e.id = $1
    `, [id]);

    if (result.rows.length === 0) {
      return res.status(404).json({ success: false, message: '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    res.json({ success: true, event: result.rows[0] });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

export default router;
