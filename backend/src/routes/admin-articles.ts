import express from 'express';
import { body, validationResult } from 'express-validator';
import { authenticateToken } from '../middleware/auth';
import { query } from '../config/database';
import { createArticleEditedNotification, createArticleDeletedNotification } from '../utils/notifications';

const router = express.Router();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const requireAdmin = (req: any, res: any, next: any) => {
  if (req.userType !== 'admin') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' });
  }
  next();
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—å–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ—Ä–∞—Ö
router.get('/', authenticateToken, requireAdmin, async (req, res) => {
  try {
    console.log('üîç –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ articles
    const tableCheck = await query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'articles'
      );
    `);
    
    console.log('üìä –¢–∞–±–ª–∏—Ü–∞ articles —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', tableCheck.rows[0].exists);
    
    if (!tableCheck.rows[0].exists) {
      return res.json({ success: true, articles: [] });
    }
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã articles
    const structureCheck = await query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'articles'
    `);
    
    console.log('üìä –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ articles:', structureCheck.rows.map(r => r.column_name));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ author_id
    const hasAuthorId = structureCheck.rows.some(row => row.column_name === 'author_id');
    const hasIsPublished = structureCheck.rows.some(row => row.column_name === 'is_published');
    const hasCreatedAt = structureCheck.rows.some(row => row.column_name === 'created_at');
    
    console.log('üìä author_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', hasAuthorId);
    console.log('üìä is_published —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', hasIsPublished);
    console.log('üìä created_at —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', hasCreatedAt);
    
    let queryString;
    let queryParams = [];
    
    if (hasAuthorId) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å author_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º JOIN —Å users
      queryString = `
        SELECT 
          a.*,
          u.name as author_name,
          u.email as author_email,
          CASE WHEN a.is_published = true THEN '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞' ELSE '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏' END as status
        FROM articles a
        JOIN users u ON a.author_id = u.id
        ORDER BY a.created_at DESC
      `;
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç author_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ articles –±–µ–∑ JOIN
      queryString = `
        SELECT 
          a.*,
          '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä' as author_name,
          'unknown@example.com' as author_email,
          CASE WHEN a.is_published = true THEN '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞' ELSE '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏' END as status
        FROM articles a
        ORDER BY a.created_at DESC
      `;
    }
    
    const result = await query(queryString, queryParams);
    
    console.log('‚úÖ –°—Ç–∞—Ç—å–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', result.rows.length);
    res.json({ success: true, articles: result.rows });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
});

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é
router.put('/:id', authenticateToken, requireAdmin, [
  body('title').trim().isLength({ min: 5 }).withMessage('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤'),
  body('content').trim().isLength({ min: 50 }).withMessage('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤'),
  body('is_published').isBoolean().withMessage('–°—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å boolean')
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ success: false, errors: errors.array() });
    }

    const { id } = req.params;
    const { title, content, is_published } = req.body;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ –∏ –∞–≤—Ç–æ—Ä–µ
    const articleResult = await query(`
      SELECT a.*, u.name as author_name, u.email as author_email
      FROM articles a
      JOIN users u ON a.author_id = u.id
      WHERE a.id = $1
    `, [id]);

    if (articleResult.rows.length === 0) {
      return res.status(404).json({ success: false, message: '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    const article = articleResult.rows[0];

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é
    await query(`
      UPDATE articles 
      SET title = $1, content = $2, is_published = $3, updated_at = CURRENT_TIMESTAMP
      WHERE id = $4
    `, [title, content, is_published, id]);

    // –°–æ–∑–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∞
    await createArticleEditedNotification(article.author_id, title, is_published);

    res.json({ 
      success: true, 
      message: '–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      article: {
        id: parseInt(id),
        title,
        content,
        is_published,
        author_name: article.author_name
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—å—é
router.delete('/:id', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { id } = req.params;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ –∏ –∞–≤—Ç–æ—Ä–µ
    const articleResult = await query(`
      SELECT a.*, u.name as author_name, u.email as author_email
      FROM articles a
      JOIN users u ON a.author_id = u.id
      WHERE a.id = $1
    `, [id]);

    if (articleResult.rows.length === 0) {
      return res.status(404).json({ success: false, message: '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    const article = articleResult.rows[0];

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—å—é
    await query('DELETE FROM articles WHERE id = $1', [id]);

    // –°–æ–∑–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∞
    await createArticleDeletedNotification(article.author_id, article.title);

    res.json({ 
      success: true, 
      message: '–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞',
      deleted_article: {
        id: parseInt(id),
        title: article.title,
        author_name: article.author_name
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å—Ç–∞—Ç—å–∏
router.get('/:id', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { id } = req.params;
    
    const result = await query(`
      SELECT 
        a.*,
        u.name as author_name,
        u.email as author_email
      FROM articles a
      JOIN users u ON a.author_id = u.id
      WHERE a.id = $1
    `, [id]);

    if (result.rows.length === 0) {
      return res.status(404).json({ success: false, message: '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    res.json({ success: true, article: result.rows[0] });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

export default router;
