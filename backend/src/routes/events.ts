import express from 'express';
import { body, validationResult } from 'express-validator';
import { query } from '../config/database';
import { authenticateToken, requireExpert, AuthRequest } from '../middleware/auth';
import emailjs from '@emailjs/browser';

const router = express.Router();

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
const sendModerationEmail = async (event: any, organizer: any) => {
  try {
    const approveUrl = `${process.env.FRONTEND_URL || 'https://soulsynergy.ru'}/api/events/approve/${event.id}`;
    const rejectUrl = `${process.env.FRONTEND_URL || 'https://soulsynergy.ru'}/api/events/reject/${event.id}`;
    
    await emailjs.send(
      process.env.EMAILJS_SERVICE_ID!,
      process.env.EMAILJS_MODERATION_TEMPLATE_ID!,
      {
        event_title: event.title,
        event_date: new Date(event.event_date).toLocaleString('ru-RU'),
        event_location: event.is_online ? '–û–Ω–ª–∞–π–Ω' : event.location || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        organizer_name: organizer.name,
        event_price: event.price || '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ',
        event_description: event.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ',
        approve_url: approveUrl,
        reject_url: rejectUrl
      },
      process.env.EMAILJS_PUBLIC_KEY!
    );
    
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:', error);
    return false;
  }
};

// –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
export const EVENT_TYPES = [
  '–†–µ—Ç—Ä–∏—Ç',
  '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å',
  '–¢—Ä–µ–Ω–∏–Ω–≥',
  '–°–µ–º–∏–Ω–∞—Ä',
  '–°–∞—Ç—Å–∞–Ω–≥',
  '–ô–æ–≥–∞ –∏ –º–µ–¥–∏—Ç–∞—Ü–∏—è',
  '–§–µ—Å—Ç–∏–≤–∞–ª—å',
  '–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è',
  '–í—ã—Å—Ç–∞–≤–∫–∞',
  '–ö–æ–Ω—Ü–µ—Ä—Ç',
  '–≠–∫—Å–∫—É—Ä—Å–∏—è',
  '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'
];

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
router.get('/', async (req: AuthRequest, res) => {
  try {
    console.log('üîç –ó–∞–ø—Ä–æ—Å —Å–æ–±—ã—Ç–∏–π:', req.query);
    
    const {
      isOnline,
      cityId,
      eventTypes,
      dateFrom,
      dateTo
    } = req.query;

    let queryText = `
      SELECT 
        e.*,
        u.name as organizer_name,
        u.avatar_url as organizer_avatar,
        c.name as city_name
      FROM events e
      LEFT JOIN users u ON e.organizer_id = u.id
      LEFT JOIN cities c ON e.city_id = c.id
      WHERE e.event_date >= NOW()
    `;

    const params: any[] = [];
    let paramCount = 0;

    // –§–∏–ª—å—Ç—Ä –ø–æ –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω
    if (isOnline !== undefined) {
      const onlineValues = Array.isArray(isOnline) ? isOnline : [isOnline];
      if (onlineValues.length === 1) {
        paramCount++;
        queryText += ` AND e.is_online = $${paramCount}`;
        params.push(onlineValues[0] === 'true');
      }
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É
    if (cityId) {
      paramCount++;
      queryText += ` AND e.city_id = $${paramCount}`;
      params.push(cityId);
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π
    if (eventTypes) {
      const types = Array.isArray(eventTypes) ? eventTypes : [eventTypes];
      paramCount++;
      queryText += ` AND e.event_type = ANY($${paramCount})`;
      params.push(types);
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –æ—Ç
    if (dateFrom) {
      paramCount++;
      queryText += ` AND e.event_date >= $${paramCount}`;
      params.push(dateFrom);
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –¥–æ
    if (dateTo) {
      paramCount++;
      queryText += ` AND e.event_date <= $${paramCount}`;
      params.push(dateTo);
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–±–ª–∏–∂–∞–π—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
    queryText += ` ORDER BY e.event_date ASC`;

    console.log('üìù SQL –∑–∞–ø—Ä–æ—Å:', queryText);
    console.log('üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', params);
    
    const result = await query(queryText, params);
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π:', result.rows.length);
    
    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø–æ ID
router.get('/:id', async (req: AuthRequest, res) => {
  try {
    const { id } = req.params;

    const result = await query(
      `SELECT 
        e.*,
        u.id as organizer_id,
        u.name as organizer_name,
        u.avatar_url as organizer_avatar,
        u.bio as organizer_bio,
        c.name as city_name
      FROM events e
      LEFT JOIN users u ON e.organizer_id = u.id
      LEFT JOIN cities c ON e.city_id = c.id
      WHERE e.id = $1`,
      [id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    res.json(result.rows[0]);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
router.get('/organizer/:organizerId', async (req: AuthRequest, res) => {
  try {
    const { organizerId } = req.params;

    const result = await query(
      `SELECT 
        e.*,
        u.name as organizer_name,
        u.avatar_url as organizer_avatar,
        c.name as city_name
      FROM events e
      LEFT JOIN users u ON e.organizer_id = u.id
      LEFT JOIN cities c ON e.city_id = c.id
      WHERE e.organizer_id = $1
      ORDER BY e.event_date DESC
      LIMIT 100`,
      [organizerId]
    );

    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ (—Ç–æ–ª—å–∫–æ —ç–∫—Å–ø–µ—Ä—Ç—ã)
router.post(
  '/',
  authenticateToken,
  requireExpert,
  [
    body('title').trim().notEmpty().withMessage('–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
    body('eventType').isIn(EVENT_TYPES).withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è'),
    body('eventDate').isISO8601().withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã'),
    body('isOnline').isBoolean().withMessage('–£–∫–∞–∂–∏—Ç–µ –æ–Ω–ª–∞–π–Ω –∏–ª–∏ –æ—Ñ–ª–∞–π–Ω'),
  ],
  async (req: AuthRequest, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    try {
      const {
        title,
        description,
        coverImage,
        eventType,
        isOnline,
        cityId,
        eventDate,
        location,
        price,
        registrationLink
      } = req.body;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –æ—Ñ–ª–∞–π–Ω, –≥–æ—Ä–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
      if (!isOnline && !cityId) {
        return res.status(400).json({ error: '–î–ª—è –æ—Ñ–ª–∞–π–Ω —Å–æ–±—ã—Ç–∏—è –≥–æ—Ä–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
      }

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å –ø–æ–ª—è–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
      let result;
      try {
        result = await query(
          `INSERT INTO events (
            title, description, cover_image, event_type, is_online, city_id,
            event_date, location, price, registration_link, organizer_id,
            is_published, moderation_status
          ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
          RETURNING *`,
          [
            title,
            description,
            coverImage,
            eventType,
            isOnline,
            isOnline ? null : cityId,
            eventDate,
            location,
            price,
            registrationLink,
            req.userId,
            false, // is_published = false (—Ç—Ä–µ–±—É–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏)
            'pending' // moderation_status = 'pending'
          ]
        );
      } catch (error) {
        // –ï—Å–ª–∏ –ø–æ–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–µ–º –±–µ–∑ –Ω–∏—Ö
        console.log('–ü–æ–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –Ω–∏—Ö');
        result = await query(
          `INSERT INTO events (
            title, description, cover_image, event_type, is_online, city_id,
            event_date, location, price, registration_link, organizer_id
          ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
          RETURNING *`,
          [
            title,
            description,
            coverImage,
            eventType,
            isOnline,
            isOnline ? null : cityId,
            eventDate,
            location,
            price,
            registrationLink,
            req.userId
          ]
        );
      }

      const newEvent = result.rows[0];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
      const hasModerationFields = newEvent.hasOwnProperty('is_published') && newEvent.hasOwnProperty('moderation_status');
      
      if (hasModerationFields) {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–∏—Å—å–º–∞
        const organizerResult = await query(
          'SELECT name, email FROM users WHERE id = $1',
          [req.userId]
        );
        
        if (organizerResult.rows.length > 0) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
          await sendModerationEmail(newEvent, organizerResult.rows[0]);
        }

        res.status(201).json({
          ...newEvent,
          message: '–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é'
        });
      } else {
        res.status(201).json({
          ...newEvent,
          message: '–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ'
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }
);

// –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
router.put(
  '/:id',
  authenticateToken,
  requireExpert,
  async (req: AuthRequest, res) => {
    try {
      const { id } = req.params;
      const {
        title,
        description,
        coverImage,
        eventType,
        isOnline,
        cityId,
        eventDate,
        location,
        price,
        registrationLink
      } = req.body;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
      const checkResult = await query(
        'SELECT organizer_id FROM events WHERE id = $1',
        [id]
      );

      if (checkResult.rows.length === 0) {
        return res.status(404).json({ error: '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
      }

      if (checkResult.rows[0].organizer_id !== req.userId) {
        return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –æ—Ñ–ª–∞–π–Ω, –≥–æ—Ä–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
      if (!isOnline && !cityId) {
        return res.status(400).json({ error: '–î–ª—è –æ—Ñ–ª–∞–π–Ω —Å–æ–±—ã—Ç–∏—è –≥–æ—Ä–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
      }

      const result = await query(
        `UPDATE events SET
          title = $1,
          description = $2,
          cover_image = $3,
          event_type = $4,
          is_online = $5,
          city_id = $6,
          event_date = $7,
          location = $8,
          price = $9,
          registration_link = $10,
          updated_at = CURRENT_TIMESTAMP
        WHERE id = $11
        RETURNING *`,
        [
          title,
          description,
          coverImage,
          eventType,
          isOnline,
          isOnline ? null : cityId,
          eventDate,
          location,
          price,
          registrationLink,
          id
        ]
      );

      res.json(result.rows[0]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }
);

// –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
router.delete('/:id', authenticateToken, requireExpert, async (req: AuthRequest, res) => {
  try {
    const { id } = req.params;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    const checkResult = await query(
      'SELECT organizer_id FROM events WHERE id = $1',
      [id]
    );

    if (checkResult.rows.length === 0) {
      return res.status(404).json({ error: '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    if (checkResult.rows[0].organizer_id !== req.userId) {
      return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è' });
    }

    await query('DELETE FROM events WHERE id = $1', [id]);
    res.json({ message: '–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

export default router;
