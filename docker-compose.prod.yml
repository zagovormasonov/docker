# Docker Compose для продакшена

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    container_name: synergy-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: synergy
      POSTGRES_PASSWORD: ${DB_PASSWORD:-synergy_secure_password_2025}
      POSTGRES_DB: synergy_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - synergy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U synergy -d synergy_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: synergy-backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://synergy:${DB_PASSWORD:-synergy_secure_password_2025}@postgres:5432/synergy_db
      JWT_SECRET: ${JWT_SECRET:-change-this-secret-key-in-production}
      PORT: 3001
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost}
    volumes:
      - uploads_data:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - synergy-network
    healthcheck:
      test: ["CMD", "sh", "-c", "wget --no-verbose --tries=1 --spider http://localhost:3001/api/topics || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Frontend (Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: synergy-frontend
    restart: unless-stopped
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - synergy-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  synergy-network:
    driver: bridge

volumes:
  postgres_data:
  uploads_data:
